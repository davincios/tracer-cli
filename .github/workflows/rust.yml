name: Rust CI

on:
  push:
    branches:
      - master # Trigger on pushes to master
      - develop # Trigger on pushes to develop
    tags:
      - "v*" # Trigger on version tags like v1.0, v1.0.1, etc.
  pull_request:
    branches:
      - master # Trigger on pull requests to master
      - develop # Trigger on pull requests to develop

env:
  CARGO_TERM_COLOR: always # Ensures colored output in GitHub Actions logs

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4.1.4

      - name: Setup Rust toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3

      - name: Build
        run: cargo build --release --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Check Formatting
        run: cargo fmt -- --check

      - name: Lint with Clippy
        run: cargo clippy -- -D warnings

      - name: Upload Release Binary
        id: upload-release-binary
        uses: actions/upload-artifact@v4.3.3
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
        with:
          name: ${{ runner.os }}-binary
          path: target/release/tracer_cli

  create-release:
    name: Create Release
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4.1.4
      - name: Download Ubuntu Binary
        uses: actions/download-artifact@v4.1.7
        with:
          name: Linux-binary
          path: binaries/ubuntu
      - name: Download macOS Binary
        uses: actions/download-artifact@v4.1.7
        with:
          name: macOS-binary
          path: binaries/macos
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Ubuntu Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/ubuntu/ubuntu-latest-binary
          asset_name: Ubuntu-binary
          asset_content_type: application/octet-stream
      - name: Upload macOS Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/macos/macos-latest-binary
          asset_name: macOS-binary
          asset_content_type: application/octet-stream
